import serial
import time
import pandas as pd
import re
from threading import Thread
import numpy as np


cred = '\033[0;31;47m'
cend = '\033[0m'
cgreen = '\033[0;32;47m'


com = serial.Serial('COM4',250000)
   

class move():
    #raw_text = open(r'C:\Users\ASUS\Documents\5th Year\Thesis\Final Project Report\Learn Python\Move arm\test_0.2mm')
    with open(r'C:\Users\ASUS\Documents\5th Year\Thesis\Final Project Folder\niryo_ready_parts\Robot programmes\Test_0.2mm.txt') as raw_text:
        raw_text = list(raw_text)
    
        X = 'X' 
    
        combine = "".join(line.strip()for line in raw_text)         # Combine each line into one line 
        split = combine.split('LINEAR')                             # Split line at work LINEAR
    
    
        cordinates_list = []    
    
        p = re.compile(r'-?\d+\.\d+')                               # Compile a pattern to capture float values
    
        # Loop through every line 
        for raw_text_line in split:
          
          
            if X in raw_text_line:
             
                cordinates = [float(i) for i in p.findall(raw_text_line)]   # Extract all linear numbers from string
                cordinates_list.append(cordinates)                          # Add them cordinates to the list
             
    
        cordinates_df = pd.DataFrame(cordinates_list)
        cordinates_df = cordinates_df.fillna(0)
        print(cordinates_df)
        
        
        def move_arm(self):
            
             cordinates_df = self.cordinates_df
             
             for i in range(len(cordinates_df)): 
                
                time.sleep(0.4) # correct??
                
                joint_1 = (cordinates_df[0][i])*(np.pi/180)*(-1)
                joint_2 = (cordinates_df[1][i])*(np.pi/180)*(-1)
                joint_3 = (cordinates_df[2][i])*(np.pi/180)*(-1)
                joint_4 = (cordinates_df[3][i])*(np.pi/180)*(-1)
                joint_5 = (cordinates_df[4][i])*(np.pi/180)*(-1)
                joint_6 = (cordinates_df[5][i])*(np.pi/180)*(-1)
               
                joint_1 = round(joint_1, 6) 
                joint_2 = round(joint_2, 6)
                joint_3 = round(joint_3, 6)
                joint_4 = round(joint_4, 6)
                joint_5 = round(joint_5, 6)
                joint_6 = round(joint_6, 6)
            
                joints_value = [joint_1, joint_2, joint_3, joint_4, joint_5, joint_6]
                print(joints_value) 
                #n.move_joints(joints_value)
            
        def move_extruder(self):
            
            
            cordinates_df = self.cordinates_df
            
            com.write(str.encode("G91 \r\n"))
    
            for i in range(len(cordinates_df)): 
                
                
                time.sleep(0.4)
                extrude = cordinates_df[7][i]
                feed = cordinates_df[6][i]
               
                extrude = str(extrude)
                feed = str(feed)
                
                g_command = " G1 "
                feed_command = "F "
                extrude_command = "E \r\n"
                
                feed_command = feed_command[:1] + feed + feed_command[1:]
                extrude_command = extrude_command[:1] + extrude + extrude_command[1:]
                
                extrude_command = g_command + feed_command + extrude_command
                
                com.write(str.encode(extrude_command))
                print(extrude_command)
                #12.54
                #"G1 F E\r\n"
            


###############################################################################
#----------------------------------Arduino------------------------------------#
###############################################################################

class Arduino():
    
    time.sleep(1) #delay to safely start serial communication

    fanspeed = 0
    extruder_temp = 0
    fanspeed2 = 0
    
    def extruder_temperature(self):
        
        global extruder_temp
        
        print("\nWhat extruder temperature do you want? \n\t PLA - 190-220 \n\t PET - 265-300 \n\t ABS - 240-270 \n\t -----WARNING----- \n\t DO NOT EXCEED 300! ")
        temperature = int(input("\nTemperature ? "))
        extruder_temp = temperature
        if(temperature <= 0):
            print(cred + " Extruder Temperature must be greater than 0" + cend)
       
   # def fan_speed2(self):
        
    #    global fanspeed2
        
     #   print("\nWhat fan speed 2 do you want [0-255]?")
      #  speed2 = int(input("\nTemperature ? "))
       # fanspeed2 = speed2
       # if(fanspeed2 < 0):
        #    print(cred + "Speed must be greater than 0" + cend)
        #if(speed2 >= 0):
         #   print(cgreen + "Saved" + cend)
           
    def fan_speed(self):
        
        global fanspeed
        
        print("\nWhat fan speed do you want [0-255]?")
        speed = int(input("\nSpeed ? "))
        fanspeed = speed
        
        if(speed < 0):
            print(cred + "Speed must be greater than 0" + cend)
        if(speed >= 0):
            print(cgreen + "Saved" + cend)
        
    def printer_on(self):
        
        fan = str(fanspeed)
     #   fan2 = str(fanspeed2)
        ext = str(extruder_temp)
        
        fan_on = "M106 S \r\n"
        #fan_on2 = "M106 P1 S \r\n"
        ext_on = "M104 S \r\n"
        
        fan_on = fan_on[:6] + fan + fan_on[6:]   
        #fan_on2 = fan_on2[:10] + fan2 + fan_on2[10:]
        ext_on = ext_on[:6] + ext + ext_on[6:]
        
        time.sleep(1)
        com.write(str.encode(ext_on))
        time.sleep(1)
        com.write(str.encode(fan_on))
        time.sleep(1)
        #self.com.write(str.encode(fan_on2))
        time.sleep(1)
    
        while True:
          line = com.readline()
          print(line)
        
          if line == b'ok\n':
            break
        
    def stop_printer(self):
        
        time.sleep(.5)
        com.write(str.encode("M107 \r\n"))                  
        time.sleep(1)
        com.write(str.encode("M140 S0 \r\n")) 
        time.sleep(1)
        com.write(str.encode("M104 S0 \r\n"))
        time.sleep(1)
        print(cred + "printer is turing off" + cend)
        
        while True:
          line = com.readline()
          print(line)
        
          if line == b'ok\n':
            break
        
    def current_temperature(self):
        
        time.sleep(1)
        com.write(str.encode("M105 \r\n"))               
        time.sleep(1)
        print("Current Temperature ")
         
       # print(self.com.readline()[10])
        
        while True:
          line = com.readline()
          print(line)
        
          if line == b'ok T':
            break
       

####################################################
#---------------- MAIN ----------------------------#
####################################################

quit = False
arduino = Arduino()
move = move()

while(not(quit)):


    print("\n\t   >  - -     Niryo One - 3D Printer   - -  <   \n")
    print("\n\t1 - Print Parameters\n\t2 - Turn on Printer\n\t3 - Get Current Temperature\n\t4 - Extrude\n\t5 - Stop Printer\n\t0 -  Quit")
    choice = int(input("\nChoice ? "))
    
    if(choice == 0):                  #-----------------------------------------
     quit = True
     
    if(choice == 1):
        arduino.extruder_temperature()
        arduino.fan_speed()
           
    if(choice == 2):              #-----------------------------------------
      arduino.printer_on()
                      
    if(choice == 4):
        if __name__ == '__main__':
            Thread(target = move.move_arm).start()
            Thread(target = move.move_extruder).start()
       
    if(choice == 3):
        arduino.current_temperature()
               
    if(choice == 5):
         arduino.stop_printer()
